For Boolean Algebra:
	&& means "and"
	|| means "or"
	== means "equal"
	/= means "not equal"

	' has no function. it used emphasize or different version
About the "List"
	list can contain more than one sublist. just type [[]]
	!! used to extract value from a list
		ex:
	use let XXX = [,]
	++ means "add" can add two argument with same type. list+list
	:  also means"add". but is restricted that the first one can only be a single item. element+list
		ex:[1,2,3]:[1,2,3]  >  error    but [1,2,3]:[[1,2,3],[2,3]]  >    [[1,2,3],[1,2,3],[2,3]]
	:[] add the value infront of it(value prepended to it)
		ex: :2:3[]   >   [2,3]
	Comparing List:  compare in order
		ex:[3,600] >= [5,7]   >  false
	Other Function for List
		head: choose the first element
		tail: choose elements except the first element
		last: choose the last element
		init: choose  elements except the last element
		length: to now how many elements there are
		null: check whether the list is empty or not. True/False will be given
		reverse: list will be reversed
		take: take element from list
			ex: take 3 [1,2,3,4,5,6,7]   >  [1,2,3]   take 1 [1]    take 0    >    []
		drop: oposite to take
			ex: drop 3 [1,2,3,4,5]    >     [4,5]
		maximum:
		sum:
	Texas Ranges
		.. give ranged output
			ex: [1..4]   >  [1,2,3,4,]
			also  [1,5..20]  >  {1,5,10,15,20]
				but [4..1]  >  [],  it need to be [4,3..1]  >  [4,3,2,1]
					[1,3,5..15]   >   error
			take: limit the number
				ex: take 3 [1..40]  >  [1,2,3]
			take + cycle: not neccessory to be list
				ex: take 3 (cycle ["i eat"]   >   [i eat,i eat, i eat]  take 2 (cycle "r")  >  rr
			take + repeat: also not neccessory to be list. But list results will be given
				ex: take 3 (repeat "r")  >  ["r","r","r"]
			replicate:
				ex: replicate 3 5  >  [5,5,5]
	List Comprehension
		<- is just like ï¿½`, in english means belong to.
		|  like the | used in math expression
			ex: [x*2 | x <- [1..10], x-5>7 >  [16,18,20]
			ex: length' =
			
	tuples: by ()
		can contain different types. ex: (1,2,'asd')
		different length tuple are different types  ex: [(1,2),(1,2,3)]  >   error
		different containing type tuple are different types  ex: [(1,2,3),('a',2,3)]  >  error
			fst takes a pair(only pair, no triple or more)  and returns its first component   ex:  fst(2,4,'a')  >  2
			snd same as fst but returns second one
			zip produce a list of pairs  ex: zip [1..3]['a'..'c']  >   [(1,'a'),(2,'b'),(3,'c')]
				ex: zip[1,3..]['a'..'c']  >  [(1,'a'),(2,'b'),(3,'c')]  and the remaining numbers are ignored.


	
Type names start with capital letters